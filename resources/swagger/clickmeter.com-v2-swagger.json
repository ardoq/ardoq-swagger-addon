{
  "swagger": "2.0",
  "info": {
    "version": "v2",
    "title": "ClickMeter API",
    "description": "Api dashboard for ClickMeter API",
    "contact": {
      "name": "Api Support",
      "url": "http://www.clickmeter.com/api",
      "email": "api@clickmeter.com"
    },
    "x-providerName": "clickmeter.com",
    "x-origin": {
      "format": "swagger",
      "version": "2.0",
      "url": "http://api.v2.clickmeter.com.s3.amazonaws.com/docs/api-docs-v2.json"
    }
  },
  "host": "apiv2.clickmeter.com:80",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve current account data",
        "operationId": "Account_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update current account data",
        "operationId": "Account_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/plan": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve current account plan",
        "operationId": "Account_GetPlan",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Plan"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/guests/{guestId}/permissions": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve permissions for a guest",
        "operationId": "Account_GetPermissions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Can be \"datapoint\" or \"group\"",
            "required": false,
            "type": "string",
            "enum": [
              "datapoint",
              "group"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "type",
            "in": "query",
            "description": "Can be \"w\" or \"r\"",
            "required": false,
            "type": "string",
            "enum": [
              "r",
              "w"
            ]
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Optional id of the datapoint/group entity to filter by",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Grants.Grant]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/guests/{guestId}/permissions/count": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve count of the permissions for a guest",
        "operationId": "Account_GetPermissionsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Can be \"datapoint\" or \"group\"",
            "required": false,
            "type": "string",
            "enum": [
              "datapoint",
              "group"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "description": "Can be \"w\" or \"r\"",
            "required": false,
            "type": "string",
            "enum": [
              "r",
              "w"
            ]
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "Optional id of the datapoint/group entity to filter by",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/guests/{guestId}/{type}/permissions/patch": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Change the permission on a shared object",
        "operationId": "Account_PatchPermissions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Can be \"datapoint\" or \"group\"",
            "required": true,
            "type": "string",
            "enum": [
              "datapoint",
              "group"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "description": "The patch permission request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.PermissionPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Change the permission on a shared object",
        "operationId": "Account_PatchPermissions",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Can be \"datapoint\" or \"group\"",
            "required": true,
            "type": "string",
            "enum": [
              "datapoint",
              "group"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "description": "The patch permission request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.PermissionPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/guests": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve list of a guest",
        "operationId": "Account_GetGuests",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort \"asc\" or \"desc\"",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a guest",
        "operationId": "Account_PutGuest",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "Guest object to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Guest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Guest"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/guests/count": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve count of guests",
        "operationId": "Account_GetGuestsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/guests/{guestId}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve a guest",
        "operationId": "Account_GetGuest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Guest"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update a guest",
        "operationId": "Account_PostGuest",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Guest object with field updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Guest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Guest"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete a guest",
        "operationId": "Account_DeleteGuest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "guestId",
            "in": "path",
            "description": "Id of the guest",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/ipblacklist": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve list of a ip to exclude from event tracking",
        "operationId": "Account_GetIpBlacklist",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Accounting.IpBlacklistEntry]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create an ip blacklist entry",
        "operationId": "Account_PutIpBlacklist",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The entry to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.IpBlacklistEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.IpBlacklistEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/ipblacklist/{blacklistId}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an ip blacklist entry",
        "operationId": "Account_DeleteIpBlacklist",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "blacklistId",
            "in": "path",
            "description": "The id of the ip to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.IpBlacklistEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/domainwhitelist": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve list of a domains allowed to redirect in DDU mode",
        "operationId": "Account_GetDomainWhitelist",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Accounting.DomainWhitelistEntry]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create an domain entry",
        "operationId": "Account_PutDomainWhitelist",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The entry to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.DomainWhitelistEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.DomainWhitelistEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/account/domainwhitelist/{whitelistId}": {
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Delete an domain entry",
        "operationId": "Account_DeleteDomainWhitelist",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "whitelistId",
            "in": "path",
            "description": "The id of the domain to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.DomainWhitelistEntry"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/aggregated": {
      "get": {
        "tags": [
          "Aggregated"
        ],
        "summary": "Retrieve statistics about this customer for a timeframe",
        "operationId": "Aggregated_GetStatisticsSingle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "onlyFavorites",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/aggregated/list": {
      "get": {
        "tags": [
          "Aggregated"
        ],
        "summary": "Retrieve statistics about this customer for a timeframe grouped by some temporal entity (day/week/month)",
        "operationId": "Aggregated_GetStatisticsList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "week",
              "month"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/aggregated/summary/datapoints": {
      "get": {
        "tags": [
          "Aggregated"
        ],
        "summary": "Retrieve statistics about a subset of datapoints for a timeframe with datapoints data",
        "operationId": "Aggregated_GetDatapointsSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of datapoint (\"tl\"/\"tp\")",
            "required": true,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the datapoint marked as favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort \"asc\" or \"desc\"",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Filter by this group id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedSummaryResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/aggregated/summary/groups": {
      "get": {
        "tags": [
          "Aggregated"
        ],
        "summary": "Retrieve statistics about a subset of groups for a timeframe with groups data",
        "operationId": "Aggregated_GetGroupsSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of group (\"deleted\"/\"active\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the group marked as favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort \"asc\" or \"desc\"",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedSummaryResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/aggregated/summary/conversions": {
      "get": {
        "tags": [
          "Aggregated"
        ],
        "summary": "Retrieve statistics about a subset of conversions for a timeframe with conversions data",
        "operationId": "Aggregated_GetConversionsSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of conversion (\"deleted\"/\"active\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort \"asc\" or \"desc\"",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedSummaryResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/clickstream": {
      "get": {
        "tags": [
          "ClickStream"
        ],
        "summary": "Retrieve the latest list of events of this account. Limited to last 100.",
        "operationId": "ClickStream_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "Filter by this group id (mutually exclusive with \"datapoint\" and \"conversion\")",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "datapoint",
            "in": "query",
            "description": "Filter by this datapoint id (mutually exclusive with \"group\" and \"conversion\")",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "conversion",
            "in": "query",
            "description": "Filter by this conversion id (mutually exclusive with \"datapoint\" and \"group\")",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 50
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")",
            "required": false,
            "type": "string",
            "enum": [
              "",
              "spiders",
              "uniques",
              "nonuniques",
              "conversions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.ClickStream.Hit]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/aggregated": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve statistics about this conversion for a timeframe",
        "operationId": "Conversions_GetStatisticsSingle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the datapoint marked as favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/aggregated/list": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)",
        "operationId": "Conversions_GetStatisticsList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "week",
              "month"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/aggregated/list": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)",
        "operationId": "Conversions_GetStatisticsAllList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of conversion (\"deleted\"/\"active\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "week",
              "month"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/datapoints": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve a list of datapoints connected to this conversion",
        "operationId": "Conversions_GetDatapoints",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of datapoint (\"tl\"/\"tp\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/datapoints/count": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve a count of datapoints connected to this conversion",
        "operationId": "Conversions_GetDatapointsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of datapoint (\"tl\"/\"tp\")",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/reports": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve a top report connected to this conversion",
        "operationId": "Conversions_GetTops",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the report.",
            "required": true,
            "type": "string",
            "enum": [
              "datapoints",
              "groups",
              "browsers",
              "browsersfamilies",
              "platforms",
              "cities",
              "countries",
              "keywords",
              "referrers",
              "convparameters",
              "destinations",
              "languages",
              "params"
            ]
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "hittype",
            "in": "query",
            "description": "Type of the event you want to filter this report with. By default no filter is applied.",
            "required": false,
            "type": "string",
            "enum": [
              "clicks",
              "views"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Tops.Top"
            }
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve a list of conversions",
        "operationId": "Conversions_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of conversion (\"deleted\"/\"active\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude conversions created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude conversions created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Conversions"
        ],
        "summary": "Create a conversion",
        "operationId": "Conversions_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The body of the conversion",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Conversions.Conversion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve conversion specified by id",
        "operationId": "Conversions_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Conversions.Conversion"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Conversions"
        ],
        "summary": "Update conversion specified by id",
        "operationId": "Conversions_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "value",
            "in": "body",
            "description": "Updated body of the conversion",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Conversions.Conversion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Conversions"
        ],
        "summary": "Delete conversion specified by id",
        "operationId": "Conversions_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/count": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve a count of conversions",
        "operationId": "Conversions_Count",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status of conversion (\"deleted\"/\"active\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude conversions created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude conversions created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/datapoints/patch": {
      "put": {
        "tags": [
          "Conversions"
        ],
        "summary": "Modify the association between a conversion and a datapoint",
        "operationId": "Conversions_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Patch request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.ConversionPatchBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/datapoints/batch/patch": {
      "put": {
        "tags": [
          "Conversions"
        ],
        "summary": "Modify the association between a conversion and multiple datapoints",
        "operationId": "Conversions_Patch",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Patch requests",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.PatchBodyBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/hits": {
      "get": {
        "tags": [
          "Conversions"
        ],
        "summary": "Retrieve the list of events related to this conversion.",
        "operationId": "Conversions_GetHits",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "custom"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from (it's the lastKey field in the response object)",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")",
            "required": false,
            "type": "string",
            "enum": [
              "spiders",
              "uniques",
              "nonuniques",
              "conversions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitListPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/conversions/{conversionId}/notes": {
      "put": {
        "tags": [
          "Conversions"
        ],
        "summary": "Fast patch the \"notes\" field of a conversion",
        "operationId": "Conversions_PatchNotes",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "conversionId",
            "in": "path",
            "description": "Id of the conversion",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "note",
            "in": "body",
            "description": "Patch requests",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.GenericTextPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}/aggregated": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Retrieve statistics about this datapoint for a timeframe",
        "operationId": "DataPoints_GetStatisticsSingle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/aggregated": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Retrieve statistics about this customer for a timeframe by groups",
        "operationId": "DataPoints_GetStatisticsAggregatedSingle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of datapoint (\"tl\"/\"tp\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the datapoint is marked as favourite",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}/aggregated/list": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)",
        "operationId": "DataPoints_GetStatisticsList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "week",
              "month"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/aggregated/list": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)",
        "operationId": "DataPoints_GetStatisticsAllList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of datapoint (\"tl\"/\"tp\")",
            "required": true,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the datapoint is marked as favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "week",
              "month"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}/reports": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Retrieve a top report connected to this datapoint",
        "operationId": "DataPoints_GetTops",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the report.",
            "required": true,
            "type": "string",
            "enum": [
              "browsers",
              "browsersfamilies",
              "platforms",
              "cities",
              "countries",
              "isps",
              "ips",
              "oss",
              "ossfamilies",
              "keywords",
              "referrers",
              "destinations",
              "languages",
              "params"
            ]
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Tops.Top"
            }
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "List of all the datapoints associated to the user",
        "operationId": "DataPoints_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Where to start when retrieving elements. Default is 0 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum elements to retrieve. Default to 20 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the datapoint (\"tp\"/\"tl\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma separated list of tags you want to filter with.",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "onlyFavorites",
            "in": "query",
            "description": "Filter fields by favourite status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Create a datapoint",
        "operationId": "DataPoints_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The body of the datapoint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Datapoints.Datapoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Get a datapoint",
        "operationId": "DataPoints_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Datapoints.Datapoint"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Update a datapoint",
        "operationId": "DataPoints_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "value",
            "in": "body",
            "description": "The body of the datapoint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Datapoints.Datapoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Delete a datapoint",
        "operationId": "DataPoints_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/count": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Count the datapoints associated to the user",
        "operationId": "DataPoints_Count",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the datapoint (\"tp\"/\"tl\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma separated list of tags you want to filter with.",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "onlyFavorites",
            "in": "query",
            "description": "Filter fields by favourite status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/batch": {
      "put": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Create multiple datapoints",
        "operationId": "DataPoints_BatchPut",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "batch",
            "in": "body",
            "description": "A json containing the datapoints to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.DatapointsBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.ModifyBatchItemResponce[Api.Core.Dto.Datapoints.Datapoint,System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Update multiple datapoints",
        "operationId": "DataPoints_BatchPost",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "batch",
            "in": "body",
            "description": "A json containing the datapoints to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.DatapointsBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.ModifyBatchItemResponce[Api.Core.Dto.Datapoints.Datapoint,System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Delete multiple datapoints",
        "operationId": "DataPoints_BatchDelete",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "batch",
            "in": "body",
            "description": "A json containing the datapoints to delete.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.DeleteBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.ModifyBatchItemResponce[Api.Core.Dto.Datapoints.Datapoint,System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}/hits": {
      "get": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Retrieve the list of events related to this datapoint.",
        "operationId": "DataPoints_GetHits",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "custom"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from (it's the lastKey field in the response object)",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")",
            "required": false,
            "type": "string",
            "enum": [
              "spiders",
              "uniques",
              "nonuniques",
              "conversions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitListPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}/favourite": {
      "put": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Fast switch the \"favourite\" field of a datapoint",
        "operationId": "DataPoints_PatchFavourite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/datapoints/{id}/notes": {
      "put": {
        "tags": [
          "DataPoints"
        ],
        "summary": "Fast patch the \"notes\" field of a datapoint",
        "operationId": "DataPoints_PatchNotes",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the datapoint",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "note",
            "in": "body",
            "description": "Patch requests",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.GenericTextPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Retrieve a list of domains",
        "operationId": "Domains_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of domain (\"system\"/\"go\"/\"personal\"/\"dedicated\"). If not specified default is \"system\"",
            "required": false,
            "type": "string",
            "default": "system",
            "enum": [
              "system",
              "go",
              "personal",
              "dedicated"
            ]
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter domains with this anmen",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Create a domain",
        "operationId": "Domains_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The domain to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Domains.Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/domains/{id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get a domain",
        "operationId": "Domains_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of domain",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Domains.Domain"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Update a domain",
        "operationId": "Domains_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of domain",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "value",
            "in": "body",
            "description": "The domain to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Domains.Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete a domain",
        "operationId": "Domains_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of domain",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/domains/count": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Retrieve count of domains",
        "operationId": "Domains_Count",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of domain (\"system\"/\"go\"/\"personal\"/\"dedicated\"). If not specified default is \"system\"",
            "required": false,
            "type": "string",
            "default": "system",
            "enum": [
              "system",
              "go",
              "personal",
              "dedicated"
            ]
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter domains with this anmen",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/aggregated": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve statistics about this customer for a timeframe by groups",
        "operationId": "Groups_GetStatisticsAggregatedSingle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of group (\"deleted\"/\"active\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the group is marked as favourite",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/aggregated": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve statistics about this group for a timeframe",
        "operationId": "Groups_GetStatisticsSingle",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "If using \"yesterday\" or \"today\" timeframe you can ask for the hourly detail",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/aggregated/list": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)",
        "operationId": "Groups_GetStatisticsList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "week",
              "month"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/aggregated/list": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)",
        "operationId": "Groups_GetStatisticsAllList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of group (\"deleted\"/\"active\")",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the group is marked as favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupBy",
            "in": "query",
            "description": "The temporal entity you want to group by (\"week\"/\"month\"). If unspecified is \"day\".",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/aggregated/summary": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve statistics about a subset of datapoints for a timeframe with datapoints data",
        "operationId": "Groups_GetDatapointsSummary",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Filter by this group id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeFrame",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "today",
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "last12months",
              "lastyear",
              "currentyear",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of datapoint (\"tl\"/\"tp\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of datapoint (\"deleted\"/\"active\"/\"paused\"/\"spam\")",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by this tag name",
            "required": false,
            "type": "string"
          },
          {
            "name": "favourite",
            "in": "query",
            "description": "Is the datapoint marked as favourite",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Direction of sort \"asc\" or \"desc\"",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedSummaryResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/reports": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve a top report connected to this group",
        "operationId": "Groups_GetTops",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the report.",
            "required": true,
            "type": "string",
            "enum": [
              "browsers",
              "browsersfamilies",
              "platforms",
              "cities",
              "countries",
              "isps",
              "ips",
              "oss",
              "ossfamilies",
              "keywords",
              "referrers",
              "destinations",
              "languages",
              "params"
            ]
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "hittype",
            "in": "query",
            "description": "Type of the event you want to filter this report with. By default no filter is applied.",
            "required": false,
            "type": "string",
            "enum": [
              "clicks",
              "views"
            ]
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Tops.Top"
            }
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/datapoints": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List of all the datapoints associated to the user in this group.",
        "operationId": "Groups_GetDatapoints",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Where to start when retrieving elements. Default is 0 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum elements to retrieve. Default to 20 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the datapoint (\"tp\"/\"tl\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma separated list of tags you want to filter with.",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create a datapoint in this group",
        "operationId": "Groups_PutDatapoint",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "value",
            "in": "body",
            "description": "The body of the datapoint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Datapoints.Datapoint"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/datapoints/count": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Count the datapoints associated to the user in this group.",
        "operationId": "Groups_GetDatapointsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the datapoint (\"tp\"/\"tl\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma separated list of tags you want to filter with.",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List of all the groups associated to the user.",
        "operationId": "Groups_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Where to start when retrieving elements. Default is 0 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum elements to retrieve. Default to 20 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma separated list of tags you want to filter with.",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude groups created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude groups created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create a group",
        "operationId": "Groups_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The body of the group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Groups.Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a group",
        "operationId": "Groups_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Groups.Group"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Update a group",
        "operationId": "Groups_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "value",
            "in": "body",
            "description": "The body of the group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Groups.Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete group specified by id",
        "operationId": "Groups_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/count": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Count the groups associated to the user.",
        "operationId": "Groups_Count",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "tags",
            "in": "query",
            "description": "A comma separated list of tags you want to filter with.",
            "required": false,
            "type": "string"
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude groups created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude groups created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/hits": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve the list of events related to this group.",
        "operationId": "Groups_GetHits",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "custom"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from (it's the lastKey field in the response object)",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")",
            "required": false,
            "type": "string",
            "enum": [
              "spiders",
              "uniques",
              "nonuniques",
              "conversions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitListPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/favourite": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Fast switch the \"favourite\" field of a group",
        "operationId": "Groups_PatchFavourite",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/groups/{id}/notes": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Fast patch the \"notes\" field of a group",
        "operationId": "Groups_PatchNotes",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "note",
            "in": "body",
            "description": "Patch requests",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.GenericTextPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/hits": {
      "get": {
        "tags": [
          "Hits"
        ],
        "summary": "Retrieve the list of events related to this account.",
        "operationId": "Hits_GetHits",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "custom"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results to this number",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset where to start from (it's the lastKey field in the response object)",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter event type (\"spiders\"/\"uniques\"/\"nonuniques\"/\"conversions\")",
            "required": false,
            "type": "string",
            "enum": [
              "spiders",
              "uniques",
              "nonuniques",
              "conversions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitListPage"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Retrieve current account data",
        "operationId": "Me_GetMe",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/me/plan": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Retrieve current account plan",
        "operationId": "Me_GetMePlan",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Accounting.Plan"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a top report",
        "operationId": "Reports_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the report.",
            "required": true,
            "type": "string",
            "enum": [
              "browsers",
              "browsersfamilies",
              "platforms",
              "cities",
              "countries",
              "isps",
              "ips",
              "oss",
              "ossfamilies",
              "keywords",
              "referrers",
              "destinations",
              "languages",
              "params"
            ]
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Timeframe of the request. See list at $timeframeList",
            "required": true,
            "type": "string",
            "enum": [
              "yesterday",
              "last7",
              "last30",
              "lastmonth",
              "currentmonth",
              "previousmonth",
              "last90",
              "last120",
              "last180",
              "beginning",
              "custom"
            ]
          },
          {
            "name": "hittype",
            "in": "query",
            "description": "Type of the event you want to filter this report with. By default no filter is applied.",
            "required": false,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter by this group id (mutually exclusive with \"datapoint\" and \"conversion\")",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "datapoint",
            "in": "query",
            "description": "Filter by this datapoint id (mutually exclusive with \"group\" and \"conversion\")",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "conversion",
            "in": "query",
            "description": "Filter by this conversion id (mutually exclusive with \"datapoint\" and \"group\")",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fromDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the starting day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toDay",
            "in": "query",
            "description": "If using a \"custom\" timeFrame you can specify the ending day (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Tops.Top"
            }
          },
          "401": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/datapoints": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List of all the datapoints associated to the user filtered by this tag",
        "operationId": "Tags_GetDatapoints",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Where to start when retrieving elements. Default is 0 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum elements to retrieve. Default to 20 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the datapoint (\"tp\"/\"tl\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete the association of this tag with all datapoints",
        "operationId": "Tags_DeleteRelatedDatapoints",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/datapoints/count": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Count the datapoints associated to the user filtered by this tag",
        "operationId": "Tags_GetDatapointsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the datapoint (\"tp\"/\"tl\")",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active",
              "paused",
              "spam"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude datapoints created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude datapoints created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/groups": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List of all the groups associated to the user filtered by this tag.",
        "operationId": "Tags_GetGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Where to start when retrieving elements. Default is 0 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum elements to retrieve. Default to 20 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude groups created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude groups created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete the association of this tag with all groups",
        "operationId": "Tags_DeleteRelatedGroups",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/groups/count": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Count the groups associated to the user filtered by this tag",
        "operationId": "Tags_GetGroupsCount",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the datapoint",
            "required": false,
            "type": "string",
            "enum": [
              "deleted",
              "active"
            ]
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "Filter fields by this pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Exclude groups created before this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Exclude groups created after this date (YYYYMMDD)",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.CountResponce"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List of all the groups associated to the user filtered by this tag.",
        "operationId": "Tags_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Where to start when retrieving elements. Default is 0 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "minLength": 0
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum elements to retrieve. Default to 20 if not specified.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 20,
            "maxLength": 0,
            "minLength": 0
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the tag",
            "required": false,
            "type": "string"
          },
          {
            "name": "datapoints",
            "in": "query",
            "description": "Comma separated list of datapoints id to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Comma separated list of groups id to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of entity related to the tag",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl",
              "dp",
              "gr"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create a tag",
        "operationId": "Tags_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "description": "The body of the tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Tags.Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve a tag",
        "operationId": "Tags_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Dto.Tags.Tag"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete a tag",
        "operationId": "Tags_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/count": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List of all the groups associated to the user filtered by this tag.",
        "operationId": "Tags_Count",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the tag",
            "required": false,
            "type": "string"
          },
          {
            "name": "datapoints",
            "in": "query",
            "description": "Comma separated list of datapoints id to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "groups",
            "in": "query",
            "description": "Comma separated list of groups id to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of entity related to the tag",
            "required": false,
            "type": "string",
            "enum": [
              "tp",
              "tl",
              "dp",
              "gr"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/System.Object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/datapoints/patch": {
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Associate/Deassociate a tag with a datapoint",
        "operationId": "Tags_PatchDataPoint",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The body patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.PatchBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/groups/patch": {
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Associate/Deassociate a tag with a group",
        "operationId": "Tags_PatchGroup",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The body patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.PatchBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    },
    "/tags/{tagId}/name": {
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Fast patch a tag name",
        "operationId": "Tags_PatchTagName",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "Id of the tag",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The body patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Api.Core.Requests.GenericTextPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Api.Core.Dto.Accounting.User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "companyRole": {
          "type": "string"
        },
        "timezone": {
          "format": "int32",
          "type": "integer"
        },
        "timezonename": {
          "type": "string"
        },
        "bonusClicks": {
          "format": "int64",
          "type": "integer"
        },
        "boGoVal": {
          "type": "string"
        },
        "registrationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "timeframeMinDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.Accounting.Plan": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "price": {
          "format": "double",
          "type": "number"
        },
        "recurring": {
          "type": "boolean"
        },
        "recurringPeriod": {
          "format": "int32",
          "type": "integer"
        },
        "maximumDatapoints": {
          "format": "int64",
          "type": "integer"
        },
        "maximumGuests": {
          "format": "int64",
          "type": "integer"
        },
        "usedDatapoints": {
          "format": "int64",
          "type": "integer"
        },
        "monthlyEvents": {
          "format": "int64",
          "type": "integer"
        },
        "usedMonthlyEvents": {
          "format": "int64",
          "type": "integer"
        },
        "profileId": {
          "format": "int64",
          "type": "integer"
        },
        "bonusMonthlyEvents": {
          "format": "int64",
          "type": "integer"
        },
        "allowedPersonalUrls": {
          "format": "int32",
          "type": "integer"
        },
        "allowedPersonalDomains": {
          "format": "int32",
          "type": "integer"
        },
        "billingPeriodStart": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "billingPeriodEnd": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Grants.Grant]": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Grants.Grant"
          }
        }
      }
    },
    "Api.Core.Dto.Grants.Grant": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
        },
        "EntityName": {
          "type": "string"
        },
        "EntityType": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "DatapointType": {
          "type": "string"
        }
      }
    },
    "Api.Core.Responses.EntityUri[System.Int64]": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Api.Core.Responses.CountResponce": {
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Api.Core.Requests.PermissionPatchRequest": {
      "type": "object",
      "properties": {
        "Verb": {
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "Action": {
          "type": "string"
        }
      }
    },
    "Api.Core.Responses.EntitiesResponse[Api.Core.Responses.EntityUri[System.Int64]]": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
          }
        }
      }
    },
    "Api.Core.Dto.Accounting.Guest": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "loginCount": {
          "format": "int32",
          "type": "integer"
        },
        "timeZone": {
          "format": "int32",
          "type": "integer"
        },
        "timezonename": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "dateFormat": {
          "type": "string"
        },
        "timeFormat": {
          "enum": [
            "AmPm",
            "H24"
          ],
          "type": "string"
        },
        "decimalSeparator": {
          "type": "string"
        },
        "numberGroupSeparator": {
          "type": "string"
        },
        "currentGrant": {
          "$ref": "#/definitions/Api.Core.Dto.Grants.Grant"
        },
        "userName": {
          "type": "string"
        },
        "extendedGrants": {
          "$ref": "#/definitions/Api.Core.Dto.Accounting.ExtendedGrants"
        },
        "conversionOptions": {
          "$ref": "#/definitions/Api.Core.Dto.Accounting.ConversionOptions"
        },
        "groupGrants": {
          "format": "int64",
          "type": "integer"
        },
        "tlGrants": {
          "format": "int64",
          "type": "integer"
        },
        "tpGrants": {
          "format": "int64",
          "type": "integer"
        },
        "creationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "timeframeMinDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.Accounting.ExtendedGrants": {
      "type": "object",
      "properties": {
        "allowGroupCreation": {
          "type": "boolean"
        }
      }
    },
    "Api.Core.Dto.Accounting.ConversionOptions": {
      "type": "object",
      "properties": {
        "percentValue": {
          "format": "int32",
          "type": "integer"
        },
        "percentCommission": {
          "format": "int32",
          "type": "integer"
        },
        "hideCount": {
          "type": "boolean"
        },
        "hideValue": {
          "type": "boolean"
        },
        "hideComCost": {
          "type": "boolean"
        },
        "hideCost": {
          "type": "boolean"
        },
        "hideParams": {
          "type": "boolean"
        }
      }
    },
    "Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Accounting.IpBlacklistEntry]": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Accounting.IpBlacklistEntry"
          }
        }
      }
    },
    "Api.Core.Dto.Accounting.IpBlacklistEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        }
      }
    },
    "Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Accounting.DomainWhitelistEntry]": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Accounting.DomainWhitelistEntry"
          }
        }
      }
    },
    "Api.Core.Dto.Accounting.DomainWhitelistEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Aggregated.AggregatedResult": {
      "type": "object",
      "properties": {
        "entityId": {
          "type": "string"
        },
        "totalClicks": {
          "format": "int64",
          "type": "integer"
        },
        "uniqueClicks": {
          "format": "int64",
          "type": "integer"
        },
        "totalViews": {
          "format": "int64",
          "type": "integer"
        },
        "uniqueViews": {
          "format": "int64",
          "type": "integer"
        },
        "spiderHitsCount": {
          "format": "int64",
          "type": "integer"
        },
        "conversionsValue": {
          "format": "double",
          "type": "number"
        },
        "conversionsCost": {
          "format": "double",
          "type": "number"
        },
        "convertedClicks": {
          "format": "int64",
          "type": "integer"
        },
        "uniqueConversions": {
          "format": "int64",
          "type": "integer"
        },
        "commissionsCost": {
          "format": "double",
          "type": "number"
        },
        "entityData": {
          "$ref": "#/definitions/System.Object"
        },
        "hourlyBreakDown": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
          }
        },
        "activityDay": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "fromDay": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "toDay": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "lastHitDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "System.Object": {
      "type": "object",
      "properties": {}
    },
    "Api.Core.Responses.EntitiesResponse[Api.Core.Dto.Aggregated.AggregatedResult]": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
          }
        }
      }
    },
    "Api.Core.Dto.Aggregated.AggregatedSummaryResult": {
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "limit": {
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int64",
          "type": "integer"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Aggregated.AggregatedResult"
          }
        }
      }
    },
    "Api.Core.Responses.EntitiesResponse[Api.Core.Dto.ClickStream.Hit]": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.ClickStream.Hit"
          }
        }
      }
    },
    "Api.Core.Dto.ClickStream.Hit": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitDatapointInfo"
        },
        "browser": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitBrowserInfo"
        },
        "os": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitOsInfo"
        },
        "location": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitLocationInfo"
        },
        "conversions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitConversionInfo"
          }
        },
        "conversion1": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitConversionInfo"
        },
        "conversion2": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitConversionInfo"
        },
        "clientLanguage": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "referer": {
          "type": "string"
        },
        "realDestinationUrl": {
          "type": "string"
        },
        "isSpider": {
          "type": "string"
        },
        "isUnique": {
          "type": "string"
        },
        "isProxy": {
          "type": "string"
        },
        "queryParams": {
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/Api.Core.Dto.ClickStream.HitSource"
        },
        "accessTime": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitDatapointInfo": {
      "type": "object",
      "properties": {
        "datapointId": {
          "format": "int64",
          "type": "integer"
        },
        "datapointName": {
          "type": "string"
        },
        "datapointTitle": {
          "type": "string"
        },
        "datapointType": {
          "type": "string"
        },
        "datapointFavourite": {
          "type": "boolean"
        },
        "groupId": {
          "format": "int64",
          "type": "integer"
        },
        "groupName": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "destinationUrl": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Active",
            "Paused",
            "Abuse",
            "Deleted"
          ],
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Tags.Tag"
          }
        },
        "isPublic": {
          "type": "boolean"
        },
        "isPrivateShared": {
          "type": "boolean"
        },
        "isABTest": {
          "type": "boolean"
        },
        "trackingCode": {
          "type": "string"
        },
        "creationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitBrowserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "familyId": {
          "format": "int64",
          "type": "integer"
        },
        "familyName": {
          "type": "string"
        },
        "browserType": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitOsInfo": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "familyId": {
          "format": "int64",
          "type": "integer"
        },
        "familyName": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitLocationInfo": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "areacode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        },
        "metrocode": {
          "type": "string"
        },
        "postalcode": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitConversionInfo": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "cost": {
          "format": "double",
          "type": "number"
        },
        "comcost": {
          "format": "double",
          "type": "number"
        },
        "deleted": {
          "type": "boolean"
        },
        "parameter": {
          "type": "string"
        },
        "date": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        },
        "accessTime": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitSource": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "param": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Tags.Tag": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "datapoints": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "groups": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "Api.Core.Dto.Tops.Top": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Tops.TopItem"
          }
        },
        "createdAt": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.Tops.TopItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "totalHits": {
          "format": "int64",
          "type": "integer"
        },
        "totalClicks": {
          "format": "int64",
          "type": "integer"
        },
        "totalViews": {
          "format": "int64",
          "type": "integer"
        },
        "uniqueHits": {
          "format": "int64",
          "type": "integer"
        },
        "uniqueClicks": {
          "format": "int64",
          "type": "integer"
        },
        "uniqueViews": {
          "format": "int64",
          "type": "integer"
        },
        "spiderHits": {
          "format": "int64",
          "type": "integer"
        },
        "spiderClicks": {
          "format": "int64",
          "type": "integer"
        },
        "spiderViews": {
          "format": "int64",
          "type": "integer"
        },
        "entityData": {
          "$ref": "#/definitions/System.Object"
        },
        "totalConversions": {
          "format": "int64",
          "type": "integer"
        },
        "totalConversionsValue": {
          "format": "double",
          "type": "number"
        },
        "totalConversionsCost": {
          "format": "double",
          "type": "number"
        },
        "totalCommissionsCost": {
          "format": "double",
          "type": "number"
        },
        "lastHitDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.Conversions.Conversion": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "protocol": {
          "enum": [
            "Http",
            "Https"
          ],
          "type": "string"
        },
        "value": {
          "format": "double",
          "type": "number"
        },
        "deleted": {
          "type": "boolean"
        },
        "creationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Requests.ConversionPatchBody": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "Action": {
          "type": "string"
        },
        "ReplaceId": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Api.Core.Requests.PatchBodyBatch": {
      "type": "object",
      "properties": {
        "PatchRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Requests.PatchBody"
          }
        }
      }
    },
    "Api.Core.Requests.PatchBody": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "Action": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.ClickStream.HitListPage": {
      "type": "object",
      "properties": {
        "lastKey": {
          "type": "string"
        },
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.ClickStream.Hit"
          }
        }
      }
    },
    "Api.Core.Requests.GenericTextPatch": {
      "type": "object",
      "properties": {
        "Text": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Datapoints.Datapoint": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "TrackingLink",
            "TrackingPixel"
          ],
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "status": {
          "enum": [
            "Active",
            "Paused",
            "Abuse",
            "Deleted"
          ],
          "type": "string"
        },
        "trackingCode": {
          "type": "string"
        },
        "preferred": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Tags.Tag"
          }
        },
        "groupId": {
          "format": "int64",
          "type": "integer"
        },
        "groupName": {
          "type": "string"
        },
        "firstConversionId": {
          "format": "int64",
          "type": "integer"
        },
        "secondConversionId": {
          "format": "int64",
          "type": "integer"
        },
        "firstConversionName": {
          "type": "string"
        },
        "secondConversionName": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        },
        "encodeIp": {
          "type": "boolean"
        },
        "isSecured": {
          "type": "boolean"
        },
        "typeTL": {
          "$ref": "#/definitions/Api.Core.Dto.Datapoints.TrackingLinkSpecifics"
        },
        "typeTP": {
          "$ref": "#/definitions/Api.Core.Dto.Datapoints.TrackingPixelSpecifics"
        },
        "writePermited": {
          "type": "boolean"
        },
        "lightTracking": {
          "type": "boolean"
        },
        "creationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.Datapoints.TrackingLinkSpecifics": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "firstUrl": {
          "type": "string"
        },
        "redirectType": {
          "enum": [
            "PermanentRedirect",
            "TemporaryRedirect"
          ],
          "type": "string"
        },
        "domainId": {
          "format": "int32",
          "type": "integer"
        },
        "goDomainId": {
          "format": "int32",
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "urlAfterDateExpiration": {
          "type": "string"
        },
        "pauseAfterDateExpiration": {
          "type": "boolean"
        },
        "expirationClicks": {
          "format": "int64",
          "type": "integer"
        },
        "urlAfterClicksExpiration": {
          "type": "string"
        },
        "pauseAfterClicksExpiration": {
          "type": "boolean"
        },
        "hideUrl": {
          "type": "boolean"
        },
        "hideUrlTitle": {
          "type": "string"
        },
        "encodeUrl": {
          "type": "boolean"
        },
        "destinationMode": {
          "enum": [
            "Simple",
            "RandomDestination",
            "DestinationByLanguage",
            "SpilloverDestination",
            "DynamicUrl",
            "BrowserDestination",
            "DestinationByNation",
            "UniqueDestination",
            "SequentialDestination",
            "WeightedDestination"
          ],
          "type": "string"
        },
        "urlsByLanguage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.UrlByLanguageItem"
          }
        },
        "urlsByNation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.UrlByNationItem"
          }
        },
        "randomDestinationItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.MultipleDestinationItem"
          }
        },
        "weightedDestinationItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.WeightedDestinationItem"
          }
        },
        "sequentialDestinationItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.MultipleDestinationItem"
          }
        },
        "spilloverDestinationItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.MultipleDestinationItem"
          }
        },
        "browserDestinationItem": {
          "$ref": "#/definitions/Api.Core.Dto.Datapoints.BrowserBaseDestinationItem"
        },
        "uniqueDestinationItem": {
          "$ref": "#/definitions/Api.Core.Dto.Datapoints.UniqueDestinationItem"
        },
        "isABTest": {
          "type": "boolean"
        },
        "referrerClean": {
          "enum": [
            "None",
            "Clean",
            "Myself"
          ],
          "type": "string"
        },
        "appendQuery": {
          "type": "boolean"
        },
        "expirationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    },
    "Api.Core.Dto.Datapoints.TrackingPixelSpecifics": {
      "type": "object",
      "properties": {
        "parameterNote": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Datapoints.UrlByLanguageItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "languageCode": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Datapoints.UrlByNationItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "nation": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Datapoints.MultipleDestinationItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Datapoints.WeightedDestinationItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "weight": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Api.Core.Dto.Datapoints.BrowserBaseDestinationItem": {
      "type": "object",
      "properties": {
        "mobileDestinationUrl": {
          "type": "string"
        },
        "spidersDestinationUrl": {
          "type": "string"
        },
        "emailDestinationUrl": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Datapoints.UniqueDestinationItem": {
      "type": "object",
      "properties": {
        "firstDestinationUrl": {
          "type": "string"
        }
      }
    },
    "Api.Core.Requests.DatapointsBatch": {
      "type": "object",
      "properties": {
        "List": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Datapoints.Datapoint"
          }
        }
      }
    },
    "Api.Core.Responses.ModifyBatchItemResponce[Api.Core.Dto.Datapoints.Datapoint,System.Int64]": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "entityData": {
          "$ref": "#/definitions/Api.Core.Dto.Datapoints.Datapoint"
        },
        "result": {
          "$ref": "#/definitions/Api.Core.Responses.EntityUri[System.Int64]"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClickMeter.Infrastructure.Validation.ValidationFailure"
          }
        }
      }
    },
    "ClickMeter.Infrastructure.Validation.ValidationFailure": {
      "type": "object",
      "properties": {
        "property": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "errorValue": {
          "$ref": "#/definitions/System.Object"
        },
        "code": {
          "$ref": "#/definitions/System.Object"
        }
      }
    },
    "Api.Core.Requests.DeleteBatch": {
      "type": "object",
      "properties": {
        "Entities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.EntityUriLong"
          }
        }
      }
    },
    "Api.Core.Dto.EntityUriLong": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Domains.Domain": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "System",
            "Go",
            "Dedicated",
            "Personal"
          ],
          "type": "string"
        },
        "custom404": {
          "type": "string"
        },
        "customHomepage": {
          "type": "string"
        }
      }
    },
    "Api.Core.Dto.Groups.Group": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "preferred": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Api.Core.Dto.Tags.Tag"
          }
        },
        "isPublic": {
          "type": "boolean"
        },
        "writePermited": {
          "type": "boolean"
        },
        "creationDate": {
          "description": " (A date in \"YmdHis\" format)",
          "type": "string",
          "example": "20120203120530"
        }
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "description": "API Key Authentication",
      "name": "X-Clickmeter-AuthKey",
      "in": "header"
    }
  },
  "security": [
    {
      "api_key": []
    }
  ]
}